#utf-8

###Origin Code###
#get the model matrix
mod_mat <- model.matrix(design(dds),colData(dds))
#Define coefficient vectors for each condition
AD_Sirt6 <- colMeans(mod_mat[dds$Disease == 1 & dds$Gene == 1, ])
AD_WT <- colMeans(mod_mat[dds$Disease == 1 & dds$Gene == 0, ])
Ctrl_WT <- colMeans(mod_mat[dds$Disease == 0 & dds$Gene == 0, ])
Ctrl_Sirt6 <- colMeans(mod_mat[dds$Disease == 0 & dds$Gene == 1, ])

#Get the results of different groups
res.AD_Sirt6vsAD <- results(dds, contrast = AD_Sirt6 - AD_WT)
res.ADvsWT <- results(dds, contrast = AD_WT - Ctrl_WT)
res.Sirt6vsWT <- results(dds, contrast = Ctrl_Sirt6 - Ctrl_WT)
res.AD_Sirt6vsWT <- results(dds, contrast = AD_Sirt6 - Ctrl_WT)
res.cross <- results(dds, contrast = (AD_Sirt6 - AD_WT) - (Ctrl_Sirt6 - Ctrl_WT))

#Generate DE table
DE.AD_Sirt6vsAD <- subset(res.AD_Sirt6vsAD, padj<0.05 & abs(log2FoldChange)>1)
write.csv(DE.AD_Sirt6vsAD, file="./DE_table/DE.AD_Sirt6vsAD.csv")
DE.ADvsWT <- subset(res.ADvsWT, padj<0.05 & abs(log2FoldChange)>1)
write.csv(DE.ADvsWT, file="./DE_table/DE.ADvsWT.csv")
DE.Sirt6vsWT <- subset(res.Sirt6vsWT, padj<0.05 & abs(log2FoldChange)>1)
write.csv(DE.Sirt6vsWT, file="./DE_table/DE.Sirt6vsWT.csv")
DE.AD_Sirt6vsWT <- subset(res.AD_Sirt6vsWT, padj<0.05 & abs(log2FoldChange)>1)
write.csv(DE.AD_Sirt6vsWT, file="./DE_table/DE.AD_Sirt6vsWT.csv")
DE.cross <- subset(res.cross, padj<0.05 & abs(log2FoldChange)>1)
write.csv(DE.cross, file="./DE_table/DE.cross.csv")


###Improved Code###
# Function to calculate coefficients
calculate_coefficients <- function(dds, disease, gene) {
  mod_mat <- model.matrix(~ design(dds), colData(dds))
  colMeans(mod_mat[dds$Disease == disease & dds$Gene == gene, ])
}

# Function to get DE table
get_DE_table <- function(dds, contrast, file_name) {
  res <- results(dds, contrast = contrast)
  DE <- subset(res, padj < 0.05 & abs(log2FoldChange) > 1)
  write.csv(DE, file = paste("./DE_table/", file_name, ".csv", sep=""))
}

# Coefficients
coefficients <- list(
  AD_Sirt6 = calculate_coefficients(dds, 1, 1),
  AD_WT = calculate_coefficients(dds, 1, 0),
  Ctrl_Sirt6 = calculate_coefficients(dds, 0, 1),
  Ctrl_WT = calculate_coefficients(dds, 0, 0)
)

# Contrasts and file names
contrasts_and_files <- list(
  list(contrast = coefficients$AD_Sirt6 - coefficients$AD_WT, file = "DE.AD_Sirt6vsAD"),
  list(contrast = coefficients$AD_WT - coefficients$Ctrl_WT, file = "DE.ADvsWT"),
  list(contrast = coefficients$Ctrl_Sirt6 - coefficients$Ctrl_WT, file = "DE.Sirt6vsWT"),
  list(contrast = coefficients$AD_Sirt6 - coefficients$Ctrl_WT, file = "DE.AD_Sirt6vsWT"),
  list(contrast = (coefficients$AD_Sirt6 - coefficients$AD_WT) - (coefficients$Ctrl_Sirt6 - coefficients$Ctrl_WT), file = "DE.cross")
)

# Generating DE tables
for (cf in contrasts_and_files) {
  get_DE_table(dds, cf$contrast, cf$file)
}

#####Notes######
* I created two functions: calculate_coefficients and get_DE_table. This makes the code more modular and reusable.

* I stored the coefficients in a list called coefficients, and I created a list called contrasts_and_files that contains the contrasts and file names.

* I used a for loop to loop through each contrast and file name and generate the DE tables.

This code does the same thing as your original code but is more concise and easier to maintain. Additionally, by using functions, it's easier to reuse parts of the code for similar tasks in the future.
